services:
  # Redis
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["redis-server", "--appendonly", "yes"]

  # PostgreSQL
  db:
    image: postgres:15
    container_name: movie_mirrors_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: movie_mirrors_db
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # pgAdmin (optional)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_PASS}
      ENABLE_PROXY_FIX: "True"
      PGADMIN_CONFIG_PROXY_X_HOST_COUNT: 1
    volumes:
      - ./pgadmin_config_local.py:/pgadmin4/config_local.py
    ports:
      - "5050:80"
    depends_on:
      - db

  # Telegram bot
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: movie_bot
    working_dir: /app/bot
    command: ["python", "main.py"]
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - TMDB_API_KEY=${TMDB_API_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - BOT_TOKEN=${BOT_TOKEN}
      - GRASPIL_ENABLED=${GRASPIL_ENABLED}
      - GRASPIL_API_KEY=${GRASPIL_API_KEY}
      - PYTHONPATH=/app
    restart: unless-stopped

  # FastAPI backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    working_dir: /app/backend
    command: uvicorn backend.video_redirector.main:app --host 0.0.0.0 --port 8018
    volumes:
      - .:/app
      - camoufox_cache:/usr/local/share/camoufox
      - /home/vladadmin/movie_bot/backend/session_files:/app/backend/session_files
    ports:
      - "127.0.0.1:8018:8018"
    depends_on:
      - db
      - redis
    environment:
      - MOVIE_MIRRORS_DB_URL=${MOVIE_MIRRORS_DB_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - PYTHONPATH=/app
      - PROXY_ENABLED=${PROXY_ENABLED}
    restart: unless-stopped

  delivery_bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: delivery_bot
    working_dir: /app/delivery_bot
    command: [ "python", "main.py" ]
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - DELIVERY_BOT_TOKEN=${DELIVERY_BOT_TOKEN}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - BACKEND_DOWNLOAD_SECRET=${BACKEND_DOWNLOAD_SECRET}
      - ADMIN_CHAT_ID=${ADMIN_CHAT_ID}
      - PING_BOT_TOKEN=${PING_BOT_TOKEN}
      - PYTHONPATH=/app
    restart: unless-stopped

volumes:
  postgres_data:
  camoufox_cache:
